name: Versioning Workflows

on:
  push:
    branches:
      - main
      - pre-patch
      - pre-minor
      - minor

jobs:
  version:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Configure Git
      run: |
        git config --global user.email "bedoyasergio3@gmail.com"
        git config --global user.name "SergioABH"

    - name: Install Dependencies
      run: npm install

    - name: Determine Version
      run: |
        commit_message=$(git log --format=%B -n 1 HEAD)

        # Lógica de versión personalizada
        if [[ "$commit_message" == *"-rc."* ]]; then
          # Obtén el número de versión actual desde package.json
          current_version=$(node -p "require('./package.json').version")

          # Extrae los componentes de la versión actual
          major=$(echo "$current_version" | cut -d. -f1)
          minor=$(echo "$current_version" | cut -d. -f2)
          patch=$(echo "$current_version" | cut -d. -f3)
          prerelease=$(echo "$current_version" | cut -d- -f2)
          rc_number=$(echo "$prerelease" | cut -d. -f2)

          # Incrementa el número de rc o reinicia si se cambia a una rama diferente
          if [[ "$GITHUB_REF" == "refs/heads/pre-patch" ]]; then
            rc_number=$((rc_number + 1))
          elif [[ "$GITHUB_REF" == "refs/heads/pre-minor" ]]; then
            rc_number=0
            patch=$((patch + 1))
          elif [[ "$GITHUB_REF" == "refs/heads/minor" ]]; then
            rc_number=0
            minor=$((minor + 1))
          fi

          # Construye la nueva versión
          new_version="$major.$minor.$patch-rc.$rc_number"

          # Actualiza la versión en package.json
          echo "{\"version\":\"$new_version\"}" > package.json

          # Imprime la nueva versión para referencia
          echo "Nueva versión: $new_version"
        else
          # Lógica de ejemplo, puedes ajustarla según tus necesidades
          if echo "$commit_message" | grep -q 'fix'; then
            # Cambios de tipo fix van a pre-patch
            new_branch="pre-patch"
            version_type="patch"
          elif echo "$commit_message" | grep -q 'feature'; then
            # Cambios de tipo feature van a pre-minor
            new_branch="pre-minor"
            version_type="minor"
          elif echo "$commit_message" | grep -q 'breaking change'; then
            # Cambios de tipo breaking change van a minor
            new_branch="minor"
            version_type="minor"
          else
            # Por defecto, otros cambios van a pre-patch
            new_branch="pre-patch"
            version_type="patch"
          fi

          # Cambia de rama si es necesario
          if [[ "$GITHUB_REF" != "refs/heads/$new_branch" ]]; then
            git checkout -b "$new_branch"
            git push origin "$new_branch"
          fi

          # Actualiza la versión en package.json
          npm version "$version_type" --no-git-tag-version

          # Imprime la nueva versión para referencia
          echo "Nueva versión: $(node -p "require('./package.json').version")"
        fi


    - name: Push Changes and Tags
      run: |
        current_branch=${GITHUB_REF#refs/heads/}
        git add package.json
        git commit -m "Bump version"
        git push origin "$current_branch"
        git push --tags

    - name: Push Changes with Token
      if: github.event_name == 'push'
      run: |
        git config --global user.email "bedoyasergio3@gmail.com"
        git config --global user.name "SergioABH"
        git remote add origin_with_token "https://github.com/$GITHUB_REPOSITORY.git"
        git fetch --no-tags origin_with_token +refs/heads/*:refs/remotes/origin_with_token/*
        git checkout main
        git merge --no-ff origin_with_token/main
        git push origin_with_token HEAD:refs/heads/main
        git push --tags origin_with_token
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
